import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'idea'

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def version = "1.0.0.alpha.1"
def version_code = 107

android {
  compileSdkVersion 24
  buildToolsVersion "24.0.2"

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 16
    targetSdkVersion 24
    versionCode version_code
    versionName version
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
    }

    preview {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".preview"
      versionNameSuffix "-preview"
    }
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "5G"
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId);
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}

ext {
  support_library_version = "24.2.1"
  dbflow_version = "3.1.1"
  toothpick_version = "1.0.0-RC9"
  jackson_version = "2.8.3"
  butterknife_version = "8.4.0"
  material_dialogs_version = "0.9.0.1"
}

dependencies {
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  compile "com.android.support:appcompat-v7:${support_library_version}"
  compile "com.android.support:support-v4:${support_library_version}"
  compile "com.android.support:support-annotations:${support_library_version}"
  compile "com.android.support:recyclerview-v7:${support_library_version}"
  compile "com.android.support:design:${support_library_version}"

  compile 'com.squareup.picasso:picasso:2.5.2'

  kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
  // use kapt for kotlin apt\
  compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"
  compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
  compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
  compile "com.github.machinarius:preferencefragment:0.1.2"
  compile "com.jakewharton:butterknife:${butterknife_version}"
  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'io.reactivex:rxjava:1.2.0'
  compile 'io.reactivex:rxkotlin:0.60.0'

  compile "com.github.stephanenicolas.toothpick:toothpick-runtime:${toothpick_version}"
  compile "com.github.stephanenicolas.toothpick:smoothie:${toothpick_version}"
  kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:${toothpick_version}"

  //highly recommended
  testCompile "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"
  testCompile "org.robolectric:robolectric:3.1.2"
  testCompile "org.mockito:mockito-core:1.10.19"
  testCompile "com.google.truth:truth:0.30"
  testCompile 'junit:junit:4.12'

  compile 'uk.co.chrisjenx:calligraphy:2.2.0'

  compile "com.github.afollestad.material-dialogs:core:${material_dialogs_version}"
  compile "com.github.afollestad.material-dialogs:commons:${material_dialogs_version}"
  compile 'com.jakewharton.timber:timber:4.3.1'
  compile 'com.jakewharton.rxrelay:rxrelay:1.1.0'

  kapt "com.jakewharton:butterknife-compiler:${butterknife_version}"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  compile 'org.slf4j:slf4j-api:1.7.21'
  compile 'com.github.tony19:logback-android-core:1.1.1-6'
  compile 'com.github.tony19:logback-android-classic:1.1.1-6'
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs.getAt('release')
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}

repositories {
  mavenCentral()
}


kapt {
  generateStubs = true
  arguments {
    arg('toothpick_registry_package_name', 'com.kelsos.mbrc')
    arg('toothpick_registry_children_package_names', 'toothpick.smoothie')
  }
}
