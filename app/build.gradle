import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'idea'


repositories {
  maven { url 'https://maven.fabric.io/public' }
}

static buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def fabricApiKey() {
  def fabricProperties = rootProject.file('fabric.properties')
  if (fabricProperties.exists()) {
    def prop = new Properties()
    prop.load(new FileInputStream(fabricProperties))
    return prop.getAt("apiKey")
  } else {
    return ""
  }
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def version = "1.0.1"
def version_code = 112

android {
  compileSdkVersion 25
  buildToolsVersion "25.0.1"

  defaultConfig {
    manifestPlaceholders = [apiKey: fabricApiKey()]
    applicationId "com.kelsos.mbrc"
    minSdkVersion 16
    targetSdkVersion 25
    versionCode version_code
    versionName version
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    // Enabling multidex support.
    multiDexEnabled true
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField "boolean", "USE_CRASHLYTICS", "true"
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
      testCoverageEnabled = true
      ext.enableCrashlytics = false

      buildConfigField "boolean", "USE_CRASHLYTICS", "false"
    }
  }

  productFlavors {
    play {
      ext.enableCrashlytics = true
    }

    github {
      ext.enableCrashlytics = false
    }
  }


  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "5G"
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId)
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }

  sourceSets {
    androidTest.java.srcDirs += "src/androidTest/kotlin"
    test.java.srcDirs += 'src/test/kotlin'
    main.java.srcDirs += 'src/main/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    play.java.srcDirs += 'src/play/kotlin'
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

ext {
  support_library_version = "25.1.0"
  dbflow_version = "4.0.0-beta3"
  toothpick_version = "1.0.2"
  jackson_version = "2.8.5"
  butterknife_version = "8.4.0"
  material_dialogs_version = "0.9.1.0"
  runner_version = "0.5"
  espresso_version = "2.2.2"
  junit_version = "4.12"
  mockito_version = "2.3.7"
}

dependencies {

  compile "com.android.support:appcompat-v7:${support_library_version}"
  compile "com.android.support:support-v4:${support_library_version}"
  compile "com.android.support:support-annotations:${support_library_version}"
  compile "com.android.support:recyclerview-v7:${support_library_version}"
  compile "com.android.support:design:${support_library_version}"
  //Some of the dependencies pull the wrong version support v13
  compile "com.android.support:support-v13:${support_library_version}"

  kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"

  compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
  //compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:4.0.0-beta2"
  compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
  compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
  compile "com.jakewharton:butterknife:${butterknife_version}"

  compile "com.github.stephanenicolas.toothpick:toothpick-runtime:${toothpick_version}"
  compile "com.github.stephanenicolas.toothpick:smoothie:${toothpick_version}"
  kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:${toothpick_version}"

  compile "com.afollestad.material-dialogs:core:${material_dialogs_version}"
  compile "com.afollestad.material-dialogs:commons:${material_dialogs_version}"
  compile 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'

  kapt "com.jakewharton:butterknife-compiler:${butterknife_version}"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


  compile 'com.android.support:multidex:1.0.1'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.8.5'
  compile 'com.github.machinarius:preferencefragment:0.1.2'
  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'io.reactivex:rxjava:1.2.4'
  compile 'io.reactivex:rxkotlin:0.60.0'
  compile 'uk.co.chrisjenx:calligraphy:2.2.0'
  compile 'com.jakewharton.timber:timber:4.4.0'
  compile 'com.jakewharton.rxrelay:rxrelay:1.2.0'
  compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

  debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
  releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

  // Test dependencies
  testCompile "junit:junit:${junit_version}"
  testCompile "org.mockito:mockito-core:${mockito_version}"
  testCompile "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"
  testCompile 'org.robolectric:robolectric:3.1.4'
  testCompile 'org.robolectric:shadows-multidex:3.1.4'
  testCompile 'com.google.truth:truth:0.31'
  testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

  //Instrumentation Test dependencies
  androidTestCompile("com.android.support.test.espresso:espresso-core:${espresso_version}", {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  androidTestCompile "junit:junit:${junit_version}"
  androidTestCompile "org.mockito:mockito-core:${mockito_version}"
  androidTestCompile "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"
  androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
  androidTestCompile "com.android.support:support-annotations:${support_library_version}"
  androidTestCompile "com.android.support.test:runner:${runner_version}"
  androidTestCompile "com.android.support.test:rules:${runner_version}"
  androidTestCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

  playCompile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
    transitive = true
  }
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs['release']
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}

afterEvaluate {
  initFabricPropertiesIfNeeded()
}

/**
 * For CI because otherwise the build will fail on the fabric plugin
 */
def initFabricPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  if (!propertiesFile.exists()) {
    def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: crashlyticsBuildSecret)
      entry(key: "apiKey", value: crashlyticsApikey)
    }
  }
}

repositories {
  mavenCentral()
}

kapt {
  generateStubs = true
  arguments {
    arg('toothpick_registry_package_name', 'com.kelsos.mbrc')
    arg('toothpick_registry_children_package_names', 'toothpick.smoothie')
  }
}
