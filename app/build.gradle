//noinspection GradleDependency
import java.text.SimpleDateFormat

plugins {
  id 'com.google.protobuf' version "0.8.14"
  id 'com.android.application'
  id 'androidx.navigation.safeargs'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'kotlin-parcelize'
  id 'idea'
  id 'jacoco'
}

static buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def version = "2.0.0"
def version_code = 200

android {
  compileSdkVersion 30
  buildToolsVersion '30.0.3'

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 23
    targetSdkVersion 30
    versionCode version_code
    versionName version
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

    // Enabling multidex support.
    multiDexEnabled true

    testInstrumentationRunner 'com.kelsos.mbrc.MockTestRunner'
    testApplicationId "com.kelsos.mbrc.test"
    vectorDrawables.useSupportLibrary = true

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  buildFeatures {
    dataBinding = true
  }

  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
    animationsDisabled true

    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true

      all {
        maxHeapSize = "1024m"
      }
    }
  }

  compileOptions {
    // Flag to enable support for the new language APIs
    coreLibraryDesugaringEnabled true
    // Sets Java compatibility to Java 8
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  flavorDimensions "basic"

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
      buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
      buildConfigField "boolean", "USE_CRASHLYTICS", "true"
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
      testCoverageEnabled true

      buildConfigField "String", "GIT_SHA", "\"debug_build\""
      buildConfigField "String", "BUILD_TIME", "\"debug_build\""
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"
    }
  }

  productFlavors {
    play {
      ext.enableCrashlytics = true
      apply plugin: 'com.google.gms.google-services'
      apply plugin: 'com.google.firebase.crashlytics'
      apply plugin: 'com.google.firebase.firebase-perf'
    }

    github {
      ext.enableCrashlytics = false
    }
  }


  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    pickFirst("META-INF/atomicfu.kotlin_module")
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "2G"
  }

  android.applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${defaultConfig.applicationId}-${variant.flavorName}-${variant.versionCode}-v${variant.versionName}.apk"
    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

dependencies {
  //Instrumentation Test dependencies
  androidTestImplementation 'androidx.annotation:annotation:1.1.0'

  androidTestImplementation 'androidx.multidex:multidex-instrumentation:2.0.0'
  androidTestImplementation 'androidx.test:runner:1.3.0'
  androidTestImplementation 'androidx.test.ext:junit:1.1.2'
  androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
  androidTestImplementation 'androidx.test.ext:truth:1.3.0'

  androidTestUtil 'androidx.test:orchestrator:1.3.0'

  androidTestImplementation "io.mockk:mockk-android:1.10.4"

  androidTestImplementation 'com.linkedin.testbutler:test-butler-library:2.1.1'
  androidTestUtil 'com.linkedin.testbutler:test-butler-app:2.0.0@apk'

  // Test dependencies
  testImplementation 'org.koin:koin-test:2.2.2'

  testImplementation "androidx.test:runner:1.3.0"
  testImplementation "androidx.test.ext:junit:1.1.2"
  testImplementation "androidx.test.espresso:espresso-intents:3.3.0"
  testImplementation "androidx.test.espresso:espresso-core:3.3.0"
  testImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'

  testImplementation "androidx.test.ext:truth:1.3.0"
  testImplementation "androidx.arch.core:core-testing:2.1.0"
  testImplementation "androidx.room:room-testing:2.2.6"
  testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'

  testImplementation "io.mockk:mockk:1.10.4"

  testImplementation "org.robolectric:robolectric:4.4"
  testImplementation "org.robolectric:shadows-multidex:4.4"

  //The android library only will fail the robolectric tests
  testImplementation 'org.threeten:threetenbp:1.5.0'

  implementation project(':changelog')

  implementation 'com.chibatching.kotpref:kotpref:2.13.0'

  implementation 'com.google.android.material:material:1.3.0-beta01'
  implementation 'androidx.databinding:databinding-runtime:7.0.0-alpha04'

  implementation 'androidx.appcompat:appcompat:1.2.0'
  implementation 'androidx.media:media:1.2.1'

  implementation 'androidx.core:core-ktx:1.5.0-alpha05'

  implementation 'androidx.annotation:annotation:1.1.0'
  implementation 'androidx.recyclerview:recyclerview:1.1.0'
  implementation 'androidx.preference:preference-ktx:1.1.1'
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

  implementation "androidx.navigation:navigation-fragment-ktx:2.3.2"
  implementation "androidx.navigation:navigation-ui-ktx:2.3.2"

  implementation 'androidx.paging:paging-runtime-ktx:2.1.2'

  implementation 'androidx.room:room-runtime:2.2.6'
  kapt 'androidx.room:room-compiler:2.2.6'

  implementation "androidx.work:work-runtime-ktx:2.4.0"

  implementation 'com.squareup.moshi:moshi:1.11.0'
  kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.11.0'

  implementation "org.koin:koin-core-ext:2.2.2"
  implementation 'org.koin:koin-android:2.2.2'
  implementation 'org.koin:koin-androidx-ext:2.2.2'
  implementation 'org.koin:koin-androidx-scope:2.2.2'
  implementation 'org.koin:koin-androidx-viewmodel:2.2.2'
  implementation "org.koin:koin-androidx-fragment:2.2.2"
  implementation "org.koin:koin-androidx-workmanager:2.2.2"

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'

  implementation 'com.squareup.picasso:picasso:2.8'
  implementation 'androidx.multidex:multidex:2.0.1'

  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.3.0'

  implementation  "androidx.datastore:datastore-core:1.0.0-alpha05"
  implementation  "com.google.protobuf:protobuf-javalite:3.14.0"

  def arrow_version = '0.11.0'
  implementation("io.arrow-kt:arrow-fx:$arrow_version",)
  implementation "io.arrow-kt:arrow-syntax:$arrow_version"
  kapt "io.arrow-kt:arrow-meta:$arrow_version"

  kapt "io.arrow-kt:arrow-meta:$arrow_version"

  debugImplementation('androidx.fragment:fragment-testing:1.2.5') {
    exclude group: 'androidx.test', module: 'core'
  }
  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'

  // Import the BoM for the Firebase platform
  playImplementation platform('com.google.firebase:firebase-bom:26.2.0')

  // Declare the dependencies for the Crashlytics and Analytics libraries
  // When using the BoM, you don't specify versions in Firebase library dependencies
  playImplementation 'com.google.firebase:firebase-crashlytics-ktx'
  playImplementation 'com.google.firebase:firebase-analytics-ktx'
  playImplementation 'com.google.firebase:firebase-perf:19.0.11'
  playImplementation 'com.google.firebase:firebase-core:18.0.0'
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop["keys"]
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props['keystore']
        def releaseConfig = android.signingConfigs['release']
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props['storePass']
        releaseConfig.keyAlias = props['keyAlias']
        releaseConfig.keyPassword = props['keyPass']
      }
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.10.0"
  }

  // Generates the java Protobuf-lite code for the Protobufs in this project. See
  // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
  // for more information.
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        java {
          option 'lite'
        }
      }
    }
  }
}


repositories {
  mavenCentral()
}

jacoco {
  toolVersion = "0.8.6"
}

task jacocoTestReport(type: JacocoReport,
  dependsOn: ['testGithubDebugUnitTest']) {
  group = "Reporting"
  description "Generate jacoco coverage reports"

  def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    '**/**_Impl**',
    '**/*$*$*.*', // Anonymous classes generated by kotlin
    'android/**/*.*',
    'androidx/**/*.*',
    '**/databinding/**/*.class',
    '**/**/*JsonAdapter.class',
    '**/DataBinderMapperImpl**',
    '**/DataBindingInfo**',
    '**/BR.*',
    '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
  ]

  def debugTree = fileTree(
    dir: "${buildDir}/intermediates/javac/githubDebug/compileGithubDebugJavaWithJavac",
    excludes: fileFilter
  )
  def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/githubDebug")

  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
    classDirectories.setFrom(
      files([debugTree, kotlinTree])
    )
  }

  def mainSrc = "${project.projectDir}/src/main/java"

  sourceDirectories.setFrom(files([mainSrc]))
  executionData.setFrom(fileTree(dir: "$buildDir", includes: [
    "**/*.exec",
    "**/*.ec"
  ]))
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}

android.applicationVariants.all { variant ->
  if (variant.name != 'play') {
    project.tasks.getByName('process' + variant.name.capitalize() + 'GoogleServices').enabled = false
  }
}

configurations.all {
  resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
  resolutionStrategy.force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  resolutionStrategy.force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}
