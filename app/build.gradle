import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'idea'

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

android {
  compileSdkVersion 24
  buildToolsVersion "24.0.2"

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 16
    targetSdkVersion 24
    versionCode 106
    versionName "1.0.0"
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
    }

    preview {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".preview"
      versionNameSuffix "-preview"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "4G"
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId);
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}

ext {
  support_library_version = "24.2.0"
  dbflow_version = "3.1.1"
  toothpick_version = "1.0.0-RC9"
  jackson_version = "2.8.2"
  butterknife_version = "8.4.0"
  material_dialogs_version = "0.9.0.1"
}

dependencies {
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  compile "com.android.support:appcompat-v7:${support_library_version}"
  compile "com.android.support:support-v4:${support_library_version}"
  compile "com.android.support:support-annotations:${support_library_version}"
  compile "com.android.support:recyclerview-v7:${support_library_version}"
  compile "com.android.support:design:${support_library_version}"


  apt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
  // use kapt for kotlin apt\
  compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
  compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
  compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
  compile "com.github.machinarius:preferencefragment:0.1.2"
  compile "com.jakewharton:butterknife:${butterknife_version}"
  compile 'io.reactivex:rxandroid:1.2.1'
  compile 'io.reactivex:rxjava:1.1.10'

  apt 'com.google.auto.value:auto-value:1.3'
  apt 'com.ryanharter.auto.value:auto-value-parcel:0.2.4-rc2'
  provided 'com.jakewharton.auto.value:auto-value-annotations:1.3'

  compile "com.github.stephanenicolas.toothpick:toothpick-runtime:${toothpick_version}"
  compile "com.github.stephanenicolas.toothpick:smoothie:${toothpick_version}"
  apt "com.github.stephanenicolas.toothpick:toothpick-compiler:${toothpick_version}"

  //highly recommended
  testCompile "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"
  testCompile "org.robolectric:robolectric:3.1.2"
  testCompile "org.mockito:mockito-core:1.10.19"
  testCompile "com.google.truth:truth:0.29"
  testCompile 'junit:junit:4.12'

  compile 'uk.co.chrisjenx:calligraphy:2.2.0'

  compile "com.github.afollestad.material-dialogs:core:${material_dialogs_version}"
  compile "com.github.afollestad.material-dialogs:commons:${material_dialogs_version}"
  compile 'com.jakewharton.timber:timber:4.3.0'
  compile 'com.jakewharton.rxrelay:rxrelay:1.1.0'

  apt "com.jakewharton:butterknife-compiler:${butterknife_version}"
  retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs.getAt('release')
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}

check.dependsOn 'pmd'

task pmd(type: Pmd) {

  description "Generate PMD reports for this build"

  ignoreFailures true    // Ignores failing build on warning. If not set build will fail on warning.

  ruleSets = [
      "java-basic",
      "java-braces",
      "java-naming",
      "java-android",
      "java-codesize",
      "java-design",
      "java-finalizers",
      "java-junit",
      "java-optimizations",
      "java-strictexception",
      "java-strings",
      "java-unusedcode"
  ]

  source 'src'          // Specify the source code. The script should be applied to
  include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
  exclude '**/gen/**'   // include / exclude folders and files.

  reports {
    xml.enabled = true
    html.enabled = true
  }
}


check.dependsOn 'findbugs'

task findbugs(type: FindBugs) {

  description 'Generate FindBugs reports for this build'

  ignoreFailures true

  //Higher levels increase precision and find more bugs at the expense of running time and memory consumption.
  effort = 'max'
  //The priority threshold for reporting bugs. If set to {@code low}, all bugs are reported.
  reportLevel = 'low'

  //Define path to classes
  classes = fileTree("${project.rootDir}/app/build/intermediates/classes") //path to compiled class files

  source 'src'          // Specify the source code. The script should be applied to
  include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
  exclude '**/gen/**'   // include / exclude folders and files.

  //Define exclude config file
  excludeFilter = file("${rootProject.projectDir}/config/findbugs/exclude.xml")

  //IMPORTANT: FINDBUGS CAN ONLY GENERATE 1 REPORT. XML OR HTML!! AND PATH MUST BE DEFINED!!
  reports {
    xml.enabled = false
    html.enabled = true
    xml.destination = "$project.buildDir/reports/findbugs/findbugs-output.xml"
    html.destination = "$project.buildDir/reports/findbugs/findbugs-output.html"
  }

  classpath = files()
}

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {

  description "Generate Checkstyle reports for this build"     //Add description to task

  ignoreFailures true

  configFile file("${rootProject.projectDir}/gradle/config/checkstyle/checkstyle.xml")

  source 'src'
  include '**/*.java'
  exclude '**/gen/**', '**/test/**'

  reports {
    xml.enabled = true
    html.enabled = true
  }

  classpath = files(file("${project.rootDir}/app/build/intermediates/classes"))
}

apt {
  arguments {
    'toothpick_registry_package_name' 'com.kelsos.mbrc'
    'toothpick_registry_children_package_names' 'toothpick.smoothie'
  }
}
