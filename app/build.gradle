import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

static buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

def version = "1.2.0"
def version_code = 114

android {
  compileSdkVersion 27
  buildToolsVersion '27.0.1'

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 17
    targetSdkVersion 27
    versionCode version_code
    versionName version
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

    // Enabling multidex support.
    multiDexEnabled true

    testInstrumentationRunner 'com.kelsos.mbrc.MockTestRunner'
    testApplicationId "com.kelsos.mbrc.test"
    vectorDrawables.useSupportLibrary = true
  }

  testOptions {
    unitTests.returnDefaultValues = true
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }

    execution 'ANDROID_TEST_ORCHESTRATOR'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  flavorDimensions "basic"

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
      buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
      buildConfigField "boolean", "USE_CRASHLYTICS", "true"
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
      testCoverageEnabled true
      ext.enableCrashlytics = false

      buildConfigField "String", "GIT_SHA", "\"debug_build\""
      buildConfigField "String", "BUILD_TIME", "\"debug_build\""
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"
    }
  }

  productFlavors {
    play {
      ext.enableCrashlytics = true
    }

    github {
      ext.enableCrashlytics = false
    }
  }


  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  dexOptions {
    javaMaxHeapSize "2G"
  }

  android.applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "${defaultConfig.applicationId}-${variant.flavorName}-${variant.versionCode}-v${variant.versionName}.apk"
    }
  }

  sourceSets {
    androidTest.java.srcDirs += "src/androidTest/kotlin"
    test.java.srcDirs += 'src/test/kotlin'
    main.java.srcDirs += 'src/main/kotlin'
    debug.java.srcDirs += 'src/debug/kotlin'
    play.java.srcDirs += 'src/play/kotlin'
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}

ext {
  support_library_version = "27.0.2"
  dbflow_version = "4.1.2"
  toothpick_version = "1.1.1"
  jackson_version = "2.9.4"
  runner_version = "1.0.1"
  espresso_version = "3.0.1"
  junit_version = "4.12"
  mockito_version = "2.13.0"
  robolectric_version = "3.6.1"
  truth_version = "0.39"
  leakcanary_version = "1.5.4"
}

dependencies {
  //Instrumentation Test dependencies
  androidTestImplementation "com.android.support:support-annotations:${support_library_version}"

  androidTestImplementation("com.android.support.test.espresso:espresso-core:${espresso_version}", {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:${espresso_version}"
  androidTestImplementation "junit:junit:${junit_version}"
  androidTestImplementation "com.android.support.test:runner:${runner_version}"
  androidTestImplementation "com.android.support.test:rules:${runner_version}"

  androidTestUtil 'com.android.support.test:orchestrator:1.0.1'

  androidTestImplementation "org.mockito:mockito-core:${mockito_version}"
  androidTestImplementation "org.mockito:mockito-android:${mockito_version}"

  androidTestImplementation "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"

  androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanary_version}"

  androidTestImplementation 'com.linkedin.testbutler:test-butler-library:1.3.1'
  androidTestUtil 'com.linkedin.testbutler:test-butler-app:1.3.1@apk'

  // Test dependencies
  testImplementation "junit:junit:${junit_version}"

  testImplementation "org.mockito:mockito-core:${mockito_version}"

  testImplementation "org.robolectric:robolectric:${robolectric_version}"
  testImplementation "org.robolectric:shadows-multidex:${robolectric_version}"

  testImplementation "com.google.truth:truth:${truth_version}"

  testImplementation "com.github.stephanenicolas.toothpick:toothpick-testing:${toothpick_version}"

  testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanary_version}"
  //The android library only will fail the robolectric tests
  testImplementation 'org.threeten:threetenbp:1.3.6'

  implementation "com.android.support:appcompat-v7:${support_library_version}"
  implementation "com.android.support:support-v4:${support_library_version}"
  implementation "com.android.support:support-annotations:${support_library_version}"
  implementation "com.android.support:recyclerview-v7:${support_library_version}"
  implementation "com.android.support:design:${support_library_version}"
  implementation "com.android.support:preference-v7:${support_library_version}"
  implementation "com.android.support:preference-v14:${support_library_version}"

  //Some of the dependencies pull the wrong version support v13
  implementation "com.android.support:support-v13:${support_library_version}"

  implementation 'android.arch.paging:runtime:1.0.0-alpha4-1'

  implementation 'android.arch.persistence.room:runtime:1.0.0'
  implementation 'android.arch.persistence.room:rxjava2:1.0.0'
  kapt "android.arch.persistence.room:compiler:1.0.0"

  implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
  implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"

  implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:${toothpick_version}"
  implementation "com.github.stephanenicolas.toothpick:smoothie:${toothpick_version}"
  kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:${toothpick_version}"

  implementation 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.1"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

  implementation 'com.squareup.picasso:picasso:2.5.2'
  implementation 'com.android.support:multidex:1.0.2'

  implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
  implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
  implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

  implementation 'com.jakewharton.timber:timber:4.6.0'
  implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'
  implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta4'

  implementation 'com.jakewharton.threetenabp:threetenabp:1.0.5'

  debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakcanary_version}"
  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanary_version}"

  debugImplementation 'com.facebook.stetho:stetho:1.5.0'

  playImplementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
    transitive = true
  }
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop["keys"]
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props['keystore']
        def releaseConfig = android.signingConfigs['release']
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props['storePass']
        releaseConfig.keyAlias = props['keyAlias']
        releaseConfig.keyPassword = props['keyPass']
      }
    }
  }
}

afterEvaluate {
  initFabricPropertiesIfNeeded()
}

/**
 * For CI because otherwise the build will fail on the fabric plugin*/
def initFabricPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  if (!propertiesFile.exists()) {
    def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: crashlyticsBuildSecret)
      entry(key: "apiKey", value: crashlyticsApikey)
    }
  }
}

coveralls {
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

tasks.coveralls {
  dependsOn 'jacocoTestReport'
  onlyIf { System.env.'CI' }
}

repositories {
  mavenCentral()
}

jacoco {
  toolVersion = "0.7.9"
}

kapt {
  arguments {
    arg('toothpick_registry_package_name', 'com.kelsos.mbrc')
  }
}

afterEvaluate {
  project.android.unitTestVariants.each { variant ->
    def scope = variant.variantData.scope
    project.tasks.getByName("test${variant.name.capitalize()}") { testTask ->
      testTask.testClassesDirs = files(scope.javaOutputDir)
    }
  }
}

task jacocoTestReport(type: JacocoReport,
    dependsOn: ['testGithubDebugUnitTest'/*, 'createGithubDebugCoverageReport'*/]) {
  group = "Reporting"
  description "Generate jacoco coverage reports"

  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = [
      '**/R.class',
      '**/R$*.class',
      '**/BuildConfig.*',
      '**/Manifest*.*',
      '**/*Test*.*',
      '**/FactoryRegistry.*',
      '**/*_ViewBinding*',
      '**/*MemberInjector*',
      '**/*$$Factory*.*',
      '**/MemberInjectorRegistry.*',
      '**/**_Table.*',
      '**/GeneratedDatabaseHolder.*',
      '**/*_Database.*',
      '**/*$*$*.*', // Anonymous classes generated by kotlin
      'android/**/*.*'
  ]
  def debugTree = fileTree(
      dir: "${buildDir}/intermediates/classes/github/debug",
      excludes: fileFilter
  )
  def kotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/githubDebug")
  def mainSrc = "${project.projectDir}/src/main/kotlin"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree, kotlinTree])
  executionData = fileTree(dir: "$buildDir", includes: [
      "**/*.exec",
      "**/*.ec"
  ])
}
