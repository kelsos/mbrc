import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'idea'

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}

def gitHash() {
  return "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()
}

android {
  compileSdkVersion 23
  buildToolsVersion "23.0.3"

  defaultConfig {
    applicationId "com.kelsos.mbrc"
    minSdkVersion 9
    targetSdkVersion 23
    versionCode 106
    versionName "0.12.0"
    buildConfigField "String", "GIT_SHA", "\"${gitHash()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
  }

  signingConfigs {
    release {
      storeFile file('placeholder')
      keyAlias "placeholder"
      storePassword "placeholder"
      keyPassword "placeholder"
    }
  }

  buildTypes {
    release {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      applicationIdSuffix ".dev"
      versionNameSuffix "-dev"
    }

    preview {
      signingConfig signingConfigs.release
      debuggable false
      zipAlignEnabled true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".preview"
      versionNameSuffix "-preview"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    abortOnError false
    lintConfig file("lint.xml")
    xmlReport false
    htmlReport true
    htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      def originalFilename = output.outputFile
      def versionInfo = "-v${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}"
      def filename = originalFilename.name
          .replace(".apk", versionInfo + ".apk")
          .replace(project.name, defaultConfig.applicationId);
      filename = "${originalFilename.parent}/${filename}"
      output.outputFile = file(filename)
    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.10'
}

ext {
  supportLibraryVersion = "23.4.0"
  dbflow_version = "3.0.1"
}

dependencies {
  compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
  compile "com.android.support:support-v4:${supportLibraryVersion}"
  compile "com.android.support:support-annotations:${supportLibraryVersion}"
  compile "com.android.support:recyclerview-v7:${supportLibraryVersion}"
  compile "com.android.support:design:${supportLibraryVersion}"

  compile 'com.squareup:otto:1.3.8'
  compile 'com.fasterxml.jackson.core:jackson-core:2.7.4'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.7.4'
  compile 'com.github.machinarius:preferencefragment:0.1.2'
  compile 'com.jakewharton:butterknife:8.0.1'
  compile 'io.reactivex:rxandroid:1.2.0'
  compile 'io.reactivex:rxjava:1.1.5'
  compile 'org.roboguice:roboguice:4.0.0'
  compile 'com.github.afollestad.material-dialogs:core:0.8.5.8'
  compile 'com.github.afollestad.material-dialogs:commons:0.8.5.8'
  compile 'com.jakewharton.timber:timber:4.1.2'
  compile 'com.android.support:support-v4:23.4.0'
  apt 'com.jakewharton:butterknife-compiler:8.0.1'
  provided 'org.roboguice:roboblender:4.0.0'
  retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'

  apt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
  // use kapt for kotlin apt
  compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
  compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
}

allprojects {
  afterEvaluate { project ->

    def signProperties = rootProject.file('signing.properties')
    if (signProperties.exists()) {
      def prop = new Properties()
      prop.load(new FileInputStream(signProperties))
      def filepath = prop.getAt("keys")
      def keyProperties = file(filepath)
      if (keyProperties.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(keyProperties))
        def keystorePath = props.getAt('keystore')
        def releaseConfig = android.signingConfigs.getAt('release')
        releaseConfig.storeFile = file(keystorePath)
        releaseConfig.storePassword = props.getAt('storePass')
        releaseConfig.keyAlias = props.getAt('keyAlias')
        releaseConfig.keyPassword = props.getAt('keyPass')
      }
    }
  }
}

project.tasks.withType(JavaCompile) { task -> options.compilerArgs << "-AguiceAnnotationDatabasePackageName=mbrc"
}

task findbugs(type: FindBugs) {
  ignoreFailures = false
  effort = "max"
  reportLevel = "high"
  excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
  classes = fileTree("${project.rootDir}/remote/build/intermediates/classes/debug/")

  source fileTree('src/main/java')
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    html {
      destination "$project.buildDir/reports/findbugs/findbugs.html"
    }
  }

  classpath = files(project.configurations.compile.asPath)
}

checkstyle {
  toolVersion = "6.5"
}

task checkstyle(type: Checkstyle) {

  configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
  showViolations true
  configProperties = ['checkstyle.cache.file': rootProject.file('build/checkstyle.cache'),
                      'checkstyle.config.dir': rootProject.file('config/quality/checkstyle/')]
  configProperties.checkstyleSuppressionsPath =
      file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath
  // Where is my suppressions file for checkstyle is...
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'
  classpath = files(project.configurations.compile.asPath)
}

task pmd(type: Pmd) {
  ignoreFailures = false
  ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
  ruleSets = []
  source 'src/main/java'
  include '**/*.java'
  exclude '**/gen/**'
  reports {
    xml.enabled = false
    html.enabled = true
    html {
      destination "$project.buildDir/reports/pmd/pmd.html"
    }
  }
}

check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure) {
    if (task.name in ['checkstyle']) {
      ant.xslt(in: "$buildDir/reports/checkstyle/checkstyle.xml",
          style: new File(rootDir, 'config/quality/checkstyle/checkstyle-noframes-sorted.xsl'),
          out: new File("$buildDir/reports/checkstyle/checkstyle.html"))
    }
  }
}
